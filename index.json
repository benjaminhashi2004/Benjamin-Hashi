[{"content":"Contributing to open-source can be overwhelming.\nYou are creating a pull request to an open-source project that would open up your code for people to give feedback and criticise.\nThis turns off a lot of new contributors from making an impact in open-source.\nYou might also be at a point where you are not confident enough in your programming skills that you hesitate to take that first step in contributing code.\nA good way to tackle this and gain confidence to contribute code is to start by contributing to documentation.\nDocumentation is necessary for every open-source project. Contributing to and maintaining documentation is not an easy task but is highly impactful.\nI will drop a bomb and say contributing to documentation is more important than contributing code.\nIn this post, I will try to share my insights on contributing to documentation from my experience as an open-source contributor and a maintainer.\n Being overwhelmed when you first start to contribute to open-source is natural. Start small. But start.\n Finding a Project The first thing to do before you can start contributing is finding a project you can contribute to. And the best project to contribute to is the one you have been using for a while.\nThat is, if you have been using a framework or a library, a tool or any other open-source project, contribute to it.\nWith this, you will have a lot of context on what the project is and you will definitely be able to find areas in the documentation you can improve.\nIf you cannot find such a project to contribute to, look for projects with an active community of contributors.\nCommunity is key in open-source and you will definitely reap the rewards for being part of a thriving community.\nAll these factors comes secondary to the fact that you should always contribute to projects that YOU are interested in.\nStart as a User As mentioned in the above section, you will be able to make impactful contributions if you are already a user of the project.\nSo, if you aren\u0026rsquo;t, you should start by exploring the project from the perspective of a user.\nAs a user, you will likely go through documentation and tutorials as you start out and you are likely to find bugs, out-dated content or things you can improve.\nWhen you find areas to improve, open up issues (or any form of tickets if you are not using GitHub) for these and discuss with a project maintainer to validate it and get it assigned to you.\nOnce you have been assigned an issue, you can start contributing.\nReview the Contributing Guidelines Most (if not all) open-source projects will have a contributing guideline in their GitHub/GitLab repository.\nThis document will be geared towards contributors with guidelines on setting up a developer environment and how you can make contributions.\nRead these guidelines carefully and make sure that you follow them.\nFor example, if a project requires you to sign every commit, your pull requests will be rejected very quickly if you do not do it.\nWhat should you Document? As mentioned in the previous sessions, you are likely to find issues when you start to use the project referring to the documentation.\nThis could be as simple as an outdated screenshot to outdated or missing documentation.\nOpen up issues for these as mentioned and discuss it with a maintainer to get it assigned to you.\nIf you cannot find issues by yourself, you can try to fix already open issues.\nThere are labels in GitHub issues that can help you filer out only \u0026ldquo;documentation\u0026rdquo; or \u0026ldquo;docs\u0026rdquo; issues and similar features will be there in any ticketing system being used by the project.\nIn-Code Documentation People generally don\u0026rsquo;t think of this when they think about documentation.\nIn-code documentation refers to the error messages, help texts and other text the user interacts with that doesn\u0026rsquo;t necessarily affect the \u0026ldquo;logic\u0026rdquo; of the code.\nThese are really important as users will definitely interact with this while using the project.\nAs a new contributor you have the magic eyes to spot issues with these that seasoned contributors are too close to notice.\nMore Ways to go Beyond the Docs Page Good documentation is not just limited to the docs page.\nIt can also involve:\n Writing a blog post that takes the user through a new feature Creating a Twitter thread about the project Documenting processes that can be used for the community (a contributing guide for example) Updating the project\u0026rsquo;s website  You can always ask the project maintainers to help you find areas that need contributions.\nBefore we finish this, I want to point out that non-code open-source contributions are not just limited to writing documentation.\nYou can check out other ways you can contribute to open-source projects without contributing code.\n","permalink":"https://navendu.me/posts/contributing-to-documentation/","summary":"Contributing to documentation is really impactful for an open-source project. It can also be a stepping stone to make code contributions. Learn how.","title":"Contributing to Documentation in Open-Source"},{"content":"Takeaways and additional resources from Navendu\u0026rsquo;s session on \u0026ldquo;Non-Code Contributions to Open-Source\u0026rdquo;.\nHave questions? Comment below or reach out to me at @sudo_navendu.\nYou can also checkout this Twitter thread for a quick summary of my talk.\nü§© 11 days to go until @hacktoberfest !\nHere are some ways you can contribute to open-source projects WITHOUT contributing code.\nA thread üëá.\n\u0026mdash; Navendu Pottekkat (@sudo_navendu) September 18, 2021  Slides  Key Takeaways Why Contribute to Open-Source?  Open-source is gaining traction and is the new norm Companies are hiring people with open-source skills and experience Build your skills, resume and your network Be part of a community, get mentorship or contribute to projects you use  Why Non-Code Contributions?  Has huge impact You are skilled in non-code ways Stepping stone to contributing code  How to Make Non-Code Contributions? You can engage in:\n Writing Designing Testing/Using Mentoring Community Managing/Organising  Learn more about non-code contributions here: How to Make Non-Code Contributions to Open-Source Projects.\n","permalink":"https://navendu.me/posts/webinar-non-code-contributions-to-open-source/","summary":"Key takeaways and resources from Navendu\u0026rsquo;s talk on Non-Code Contributions to Open-Source.","title":"Webinar: Non-Code Contributions to Open-Source"},{"content":"Takeaways from Navendu Pottekkat\u0026rsquo;s session on \u0026ldquo;Building Your Career in Open-Source\u0026rdquo; at Open Source India.\nHave questions? Comment below or reach out to me at @sudo_navendu.\nYou can also checkout this Twitter thread for a quick summary of my talk.\n‚ô•Ô∏è Love Open-Source? ‚ö°Ô∏è Here is how you can build your Career in Open-Source.\nüßµ A thread.\n‚ùóÔ∏è Everything mentioned here is from my experience as a noob coder to working in Open-Source full time.\n\u0026mdash; Navendu Pottekkat (@sudo_navendu) October 9, 2021  Timeline From new programmer in January 2020 to Full-time Open-Source in March 2021.\n January 2020: Started learning to code full-time March - April 2020: Started open-sourcing personal projects August 2020: Built and scaled my first open-source project (Went on to get featured on Product Hunt and JS Weekly and got to #1 Trending on GitHub) September 2020: Featured project at TFUG India November 2020: Started contributing to Meshery March 2021: LFX Mentee at Meshery (Layer5) April 2021: Maintainer of Meshery May 2021: GSoC Mentor at CNCF for Meshery June 2021: Maintainer of Service Mesh Performance July 2021: Full-time employee at Layer5 September 2021: LFX Mentor for CNCF  Slides  Key Takeaways Getting Started in Open-Source  Learn a skill or explore different area until you find what you want to skill up on Make your personal projects open-source even if it may not get wide adoption Learn Git and GitHub (see resources) Learn things in public  Building and Scaling Your Own Open-Source Projects  Solve your problem; It is likely that others face the same problem too Use social media liberally to scale up your projects Leverage successful open-source business models (see resources)  Making Your First Contribution  Find the projects you are interested in (see resources) Learn the skills needed to contribute Join the community of the project Read the contributing guidelines Grab a \u0026ldquo;good first issue\u0026rdquo; and fix it  Non-Code Contributions  Writing: Articles, social media content, documentation Designing: Artworks for social media, creating style guides Testing/Using: Reporting bugs, advocacy, improving UX, alpha/beta testing Mentoring: Reviewing code, mentoring a contributor Community Managing/Organizing: Being a project manager, being a release manager, organizing events and meetups, helping onboard new Contributors  (See resources)\nLevelling Up  Find more ways to contribute Do what a maintainer is expected to do even if you aren\u0026rsquo;t a maintainer Pay it forward  Making Money  Get an internship/paid mentorship (See resources) Get a full-time role  Getting Sponsored  GitHub Sponsors, Patreon, Open Collective Apply for open-source grants Donating the project to a foundation  Resources Referenced Surveys  Tidelift 2021 Open Source Maintainer Survey Linux Foundation Jobs Report 2021 MLH Bi-Annual Census (Spring 2021)  Tutorials/ Additional Reading  Git for Professionals Tutorial - Tools \u0026amp; Concepts for Mastering Version Control with Git Git and GitHub Complete Guide to Open Source - How to Contribute Why Open-Source - Twitter thread Starting an Open-Source Project How to Make Non-Code Contributions to Open-Source Projects 20+ Open Source Internship Programs that you can Apply to Tips to Make High-Quality Pull Requests - Twitter thread Tips to Make High-Quality Pull Requests - Blog post Business Models for Open-Source Software Getting Paid for Open-Source Work Finding Users for Your Project Open Source Metrics open-funding (Open-Source Grants)  If you liked the content of the session, follow me @sudo_navendu where I will be sharing more similar content.\nMore of my talks are in this playlist.\n","permalink":"https://navendu.me/posts/building-your-career-in-open-source/","summary":"My experience from a new programmer to working in open-source full time.","title":"Building Your Career in Open-Source"},{"content":"Do you want to contribute to open-source but you are not sure of your coding skills?\nI have good news for you.\nNon-code contributions are more valuable than contributing code.\nBut what are non-code contributions? How can I make non-code contributions? Why are you bashing coders?\nI will try to answer these questions in this post.\nAnd with Hacktoberfest right around the corner, I hope this post will encourage more open-source contributions.\nLike most of my posts, you can read this in Tweet format like the gods intended here.\nWhat are non-code contributions? Any contribution that helps an open-source project that does not involve writing code.\nThese can be anything but I have categorised it broadly into these categories:\n ‚úçÔ∏è Writing üé® Designing üßë‚Äçüî¨ Testing/Using üë• Mentoring üßë‚Äçü§ù‚Äçüßë Community Managing/Organising  Let\u0026rsquo;s look at each of these categories in detail.\n1. ‚úçÔ∏è Writing If you are good at technical writing and creating content, then this is for you.\nHere is how you can use your writing skills.\n1.1 Write Documentation Contributing to documentation is really impactful.\nEven if the project is really amazing, without documentation, nobody would be able to figure out how to use it or at least would not get maximum value from the project.\nHere is a tip to help you contribute to docs:\nWhen you first check out an open-source project, go through their existing documentation and see if you can understand or use the project from what you see in the docs.\nMost likely, you will find areas that you can improve.\nOpen issues for these and try to create a pull request adding changes that you think are needed.\nIt is always helpful for projects to have a new pair of eyes look at things. New perspectives and new ideas often come from new contributors.\n1.2 Write Tutorials and Blog Posts If you have been a user of the project and you are looking to contribute to it, then this is the best way.\nYou can write tutorials and blog posts to help people who are using the project.\nYou can also share your own insights and tips while writing these.\nIf the project has a dedicated blog, you can ask to publish there or there are other platforms like this where you can freely publish content.\nI find myself looking for well-written and up-to-date tutorials and blogs instead of going through the documentation.\nThere is no doubt that these will help the project as well as the users of the project.\n1.3 Translate Documentation People from different parts of the world could use your project.\nLanguage barrier is real and sometimes people may prefer Mandarin over English.\nSo, if you know Mandarin and English or any other pair of languages, translate the documentation to the other language.\nThis will open up the project to a whole new user base.\n1.4 Take Control of the Social Handles If your project has social media accounts, take control of it and start creating content.\nEven if you directly do not have access to the accounts, get in touch with the social media manager of the project and suggest content and ways to engage with your users and community.\nThis will drive the project\u0026rsquo;s visibility and will help gain more users and contributors.\n2. üé® Designing If you are a creative person and loves designing stuff, this is where you belong.\nHere is how you can use your palette to help the project.\n2.1 Create Art! You can put your skills to use to create artworks for the project to share on social media, blog posts and even swags. (who doesn\u0026rsquo;t like swags!)\n2.2 Create a Style Guide Most open-source projects have a large and a geographically distributed set of contributors.\nAmong other challenges, this makes it difficult to maintain consistency in visual designs.\nAs a designer and a contributor, you can create a style guide to ensure consistency.\n3. üßë‚Äçüî¨ Testing/Using As a user of the open-source project, there are multiple ways in which you can make valuable contributions.\n3.1 Reporting Bugs If you run into any bugs while using/testing the project, raise them.\nOpen up an issue and let the code contributors know about the bug.\nThis will help them identify and fix bugs improving the quality of the project.\n3.2 Become an Advocate/Evangelist Most open-source projects are community-driven and they usually do not have a dedicated marketing team to publicise the project.\nThis is where you step in as a volunteer advocate and talk about the project in events and social media while encouraging people to use the project.\nHere is a tip:\nDon\u0026rsquo;t even ask the project owners before advocating for the project.\nEveryone likes free marketing.\n3.3 Help Improve the User Experience Most open-source project maintainers/code contributors are usually too close to the project to realise bad and unintuitive UX.\nI am and I know a lot of them.\nStep in here wearing your user hat and report these issues.\nThey are always well received.\n3.4 Sign Up for Alpha/Beta Testing Alpha/Beta tests are controlled tests of a new feature or a release to ensure quality and user experience before making it available to the general user base.\nAs a user, you can sign up for the alpha/beta programs and test out the project before the new features are released and provide feedback.\nFeedback from these tests always provide insights that can help in iterating over the features/releases.\n4. üë• Mentoring Pay it forward by mentoring other contributors.\nHere are some of the ways in which you can do it.\n4.1 Review Code The more people there is to review code, the better the quality of the code will be.\nHaving more eyes on the code would mean less bugs, faster reviews and a better project.\nMost projects let anyone review pull requests and comment on it.\nIf you have opinions, this is the place for you to go.\n4.2 Mentor a Contributor Are you skilled in the project\u0026rsquo;s tech stack?\nCan you help contributors make better contributions?\nPay it forward by becoming a mentor!\nShare your experiences and knowledge and empower them to become a better open-source contributor.\nThere are a lot of open-source programs which connect mentors and mentees.\nI had curated some of these in a previous article. You can check that out here.\n5. üßë‚Äçü§ù‚Äçüßë Community Managing/Organising Open-source projects thrive as its community thrives.\nBut who manages this community? Who manages the contributors? Who manages the project?\nThis is where a community manager comes in.\n5.1 Organise the Project Stale issues? Follow up! Issues without proper labels? Add them! Does this issue still exist? Verify and close them! Unclear issue descriptions? Ask for clarification! Unreviewed pull requests? Request for reviews!\nHelp in every way you can to organise the project and make it whistle as a well oiled machine.\nFrom my experience, project organisers and community managers are well recognised in the community as well!\n5.2 Become the Release Manager A release manager keeps track of what everybody is working on and ensures that a project is ready for a release.\nSome of the responsibilities of a release manager are:\n Checking with each team Ensuring different components and features are tested Organising the alpha/beta programs  This list can go on. Basically you decide when the project is ready to make a new release.\n5.3 Organise Events and Meetups Organise project meetings. Represent your project in conferences. Organise community events.\nThis list is note exhaustive.\nGreat community managers go above and beyond and are key players in the success of an open-source project.\n5.4 Get More Chefs to Cook (I mean, non-code contributors) Engineers attract other engineers.\nBut the environment these engineers create are usually not super welcoming to non-code contributors.\nSo, become a steward of the community and make it welcoming to newcomers!\nHost newcomer meetings, share onboarding resources, connect newcomers to mentors.\nWhat would we do without community managers?\nThat\u0026rsquo;s the list! Did I miss anything?\nFeel free to add them to the comments below.\nWhat other open-source related topic should I write about next?\nComment below!\n","permalink":"https://navendu.me/posts/non-code-contributions-to-open-source/","summary":"Open-Source is not just about code. See how you can make non-code contributions to open-source.","title":"How to Make Non-Code Contributions to Open-Source Projects"},{"content":"Originally published on the DEV Community.\nWith Hacktoberfest around the corner, here are some tips to make better Pull Requests for your next Open-Source contribution.\n As a maintainer and a contributor to Open-Source projects these are the things I look for when reviewing and take care of when submitting Pull Requests.\n This is a fast read but if you want one even faster, check out this Twitter thread.\nTip 1: Contributing Docs are your Best Friends Most Open-Source projects have a contributing doc(usually a CONTRIBUTING.md file at the root of the repo) that contains all the necessary details on how to set up your development environment, coding conventions you have to follow and much more.\nIf you are looking to contribute to a project, that should be the next place to look into after the ReadME file.\nContributing doc from the Meshery project\nTip 2: Document Your PRs This is really important. I repeat this is really important.\nYou should make the reviewing process as easy as possible and a reviewer should be able to get the context of your PR with a quick glance.\nFor this, you can:\n Write self-documenting code (What is self-documenting code and how can it help? See this great answer) Use comments liberally in your code Write clear commit messages and Most importantly, comment what your PR does clearly  As shown below, the PR description shows what issue it fixes, the change made in the PR and the actual new User-Experience.\nThis makes the PR very easy to review.\nA Pull Request description example\nTip 3: Use Pull Request Templates Most Open-Source projects will have a Pull Request template to guide newcomers and veterans alike into documenting their PRs properly.\nAs you can see below, the PR template has sections where the contributors are expected to fill details.\nPull Request template from the Open Service Mesh project\nThis would make the job of the reviewer much easier as they would be able to easily test it out, ask a domain expert to review and much more.\nThese also acts like a checklist that the contributor can tick off. For example: Questions like \u0026ldquo;Did I write unit tests?\u0026rdquo;, \u0026ldquo;Did I sign all of my commits?\u0026rdquo;, \u0026ldquo;Is this a breaking change?\u0026quot; can be answered as you start filling the template.\nTip 4: Make your PRs Small and Focused Whenever possible, your Pull Requests should do one thing and one thing only.\nThe problem with addressing multiple concerns in a single PR is that the reviewer may not agree with all the changes and this could potentially lead to long discussions.\nSo small and focused PRs would reduce the time taken for reviews and would make your PR most likely to get merged.\nAn Example Pull Request with just a single, focused change\nTip 5: Add Tests If the project you are working on has automated tests, then make sure that you add tests for the code you are adding.\nNot sure if you should write tests? Here is a bonus tip:\n If it can be tested, it should be tested.\n Tip 6: Make sure the Automated Tests Pass Most projects have automated tests in their CI/CD pipelines which run on your Pull Requests.\nThese tests are in place to make sure that the code you are adding passes some constraints. These are mostly lint checks, build checks, unit tests and integration tests.\nIf these checks are not passing, fix it and make sure all the tests pass before asking for a review.\nYour code is not likely to get merged if these checks fail.\nAll checks passed!\nTip 7: Respond to Feedback When you open a Pull Request, you are also opening a discussion on why this change is needed and why your PR is the right way to add that change.\nSo, make sure that you respond to reviews, make changes to your PR as suggested by the reviewer and ask for clarification questions if needed.\nThis would make sure that you and the reviewer are on the same page and would make the PR reviews much easier.\nSometimes discussions can get really long! But these are necessary when you are adding a new feature with breaking changes\nTip 8: Be Patient Most of the Open-Source maintainers are volunteers. They maintain projects during their free time off from their work.\nSo, they may take some time to get to your PR and review it.\nSo be patient while they do their thing. Take a break, drink a cup of coffee and watch Naruto.\nBonus Tip: I will be writing about Contributing to, Building, Scaling and Maintaining Open-Source projects here on my blog as well as on Twitter and on the DEV Community.\nIn this last year, I have went from a noob Open-Source contributor to:\n Building my own project and making it to the #1 Trending Repository on GitHub Maintaining 2 CNCF Projects and Working full-time in Open-Source  I would like to share everything I\u0026rsquo;ve learned to help as many people as possible who are interested in Open-Source.\nSo, follow along and may the source be with you!\n","permalink":"https://navendu.me/posts/pull-requests-like-a-pro/","summary":"Tips to make High-Quality Pull Requests.","title":"Pull Requests Like a PRO"},{"content":"Contributing to open-source is one of the best ways to gain skills and build your resume as a student or as a new developer.\nAs open-source becomes the norm, more and more big tech companies and non-profit organizations have been investing into open-source projects and into internship programs.\nThese programs often offer the intern a mentorship opportunity and a stable stipend so that they can invest their time to work on these projects.\nThis post consists of all the details of these programs. You can skip to the summary for quick access to all these resources.\nGoogle Summer of Code (GSoC)    Program Name Duration Timeline Stipend     Google Summer of Code (GSOC) 10 Weeks, Àú3 Months January 2021 - August 2021 $1500 - $3300    This is one of the most popular programs with 700+ participating organizations. The program is organized by Google and each year students identify projects and submit proposals to work on them. Accepted students are assigned a mentor by the participating organization and students spend their summer working with them.\nLinux Foundation Mentorship Program (LFX)    Program Name Duration Timeline Stipend     Linux Foundation Mentorship Program (LFX) 12 Weeks, Àú3 Months March 1st - May 31st, June 1st - August 31st, September 1st - November 30th $3000 - $6600    This program is organized by The Linux Foundation and aims to pair open-source talent with experienced mentors. The students identify a project and create a profile to submit an application. Mentees can apply to 3 projects at a time.\nMLH Fellowship    Program Name Duration Timeline Stipend     MLH Fellowship 12 Weeks September 20th - December 13th (3 batches year round) Up to $5000 (need based)    This program will provide you the opportunity to contribute to the type of open-source projects that every company depends on.\nThere are also non-open-source programs that MLH offers. See fellowship.mlh.io/#programs.\nGoogle Season of Docs (GSoD)    Program Name Duration Timeline Stipend     Google Season of Docs 6 Months May 17th - December 14th Depends of budget of the organization    This program gives technical writers an opportunity to gain experience in open-source.\nIf you are interested in contributing to documentation, this is a really good opportunity to work on some interesting projects.\nOutreachy    Program Name Duration Timeline Stipend     Outreachy 3 Months May - August, December - March (Applications due September 3) $5500     Outreachy is a diversity initiative that provides paid, remote internships to people subject to systemic bias and impacted by underrepresentation in the technical industry where they are living.\n Season of KDE    Program Name Duration Timeline Stipend     Season of KDE 3 Months January - April No    This program offers an opportunity for people to participate in both code and non-code projects that benefits the KDE ecosystem.\nFree Software Foundation (FSF) Internship    Program Name Duration Timeline Stipend     Free Software Foundation (FSF) Internship 12 Weeks 3 terms yearly No    This program provides an opportunity to work closely with the FSF staff members in your area of interest, such as campaign and community organizing, free software licensing, systems and network administration, GNU Project support, or Web development.\nLinux Kernel Mentorship Program    Program Name Duration Timeline Stipend     Linux Kernel Mentorship Program 12 Weeks March 1st - May 31st, June 1st - August 31st, September 1st - November 30th $3000 - $6600    This program from The Linux Foundation connects experienced Linux Kernel developers and maintainers with mentees to help the become contributors to the Linux Kernel.\n The program serves as a vehicle to reach out to students and developers to inject new talent into the Linux Kernel community. It aims to increase diversity in the Linux Kernel community and work towards making the kernel more secure and sustainable. We strongly encourage applicants who are from traditionally underrepresented or marginalized groups in the technology and open source communities, including, but not limited to: persons identifying as LGBTQ, women, persons of color, and/or persons with disabilities.\n Linux Foundation Networking (LFN) Mentorship Program    Program Name Duration Timeline Stipend     Linux Foundation Networking (LFN) Mentorship Program 12 Weeks FT, 24 Weeks PT June 1st - August 21st, September 1st - ? $3000 - $6600    This program - also from The Linux Foundation - aims to provide opportunity to gain exposure to LFN\u0026rsquo;s projects and technical communities.\nThe mentors in this program are active developers and technologists contributing to the industry\u0026rsquo;s leading open source networking projects such as ONAP, OPNFV, OpenDaylight, FD.io.\nGNOME Summer of Code    Program Name Duration Timeline Stipend     GNOME Summer of Code 10 Weeks, Àú3 Months January 2021 - August 2021 $1500 - $3300    This is provided through GSoC to help underrepresented groups in free and open-source software to get involved with GNOME projects.\nAlibaba Summer of Code    Program Name Duration Timeline Stipend     Alibaba Summer of Code 3 Months May 25th - August 31st (2020) Yes    Students will receive mentorship from the Alibaba team to work on a series of open-source projects.\nFOSSASIA Codeheat    Program Name Duration Timeline Stipend     FOSSASIA Codeheat Year round October - June  Prizes for winners    This is a coding contest for FOSSASIA projects on GitHub and a jury wil choose winners from the top 10 contributors based on the code quality and the relevance of the commits.\nFOSSASIA Internship Program    Program Name Duration Timeline Stipend     FOSSASIA Internship Program 2 - 6 Months Decided individually Yes     In the program we are looking for people who would like to work on the project they choose continuously. Different to GSoC in the internship it is not only about a specific project proposal. We rather look for participants who are interested to advance the project and solve bugs or add features that are required to bring the project forward.\n Open Summer of Code    Program Name Duration Timeline Stipend     Open Summer of Code 16 days See Timeline Yes    This program will coach the students into working in different open innovation projects provided by partnering organizations, companies and governments.\nOpen Mainframe Project Mentorship Program    Program Name Duration Timeline Stipend     Open Mainframe Project Mentorship Program 3 Months Through GSoC or LFX Yes    This program would help the mentee to expand their knowledge of mainframe technology and would help them contribute to open-source projects that make it easier for infrastructure applications to run on mainframe.\nCNCF Mentoring Initiatives    Program Name Duration Timeline Stipend     CNCF Mentoring Initiatives Àú3 Months See Mentoring Programs Yes    Cloud Native Computing Foundation (CNCF) offers a vibrant community of projects and offers internships throughout the year through different mentoring programs.\nX.Org Endless Vacation of Code (EVoC)    Program Name Duration Timeline Stipend     X.Org Endless Vacation of Code (EVoC) 3 - 4 Months Can be initiated anytime $3000    The EVoC program was initiated to help support more projects that would otherwise go rejected through GSoC. Students are welcome to either come up with an idea on their own or work up a proposal for an idea suggested by someone else.\nHyperledger Mentorship Program    Program Name Duration Timeline Stipend     Hyperledger Mentorship Program 3 Months FT - 6 Months PT June 1st $3000 - $6600    This program provides a structured and hands-on opportunity for students and new developers gain exposure to Hyperledger open source development and entry to the technical community.\nJulia Seasons of Contributions (JSoC)    Program Name Duration Timeline Stipend     Julia Seasons of Contributions (JSoC) - Through GSoC or LFX Yes    A set of seasonal programs for funding or mentoring students and other developers to contribute to the Julia open-source ecosystem.\nSummer of Haskell    Program Name Duration Timeline Stipend     Summer of Haskell 10 Weeks, Àú3 Months January 2021 - August 2021 $1500 - $3300    This program is an effort by Haskell.Org to reach out to students and encourage them to contribute to the Haskell community with the aid of experienced mentors.\n24 Pull Requests    Program Name Duration Timeline Stipend     24 Pull Requests 1 Month December 1st - December 24th -    As the name suggests, this program encourages new contributors to make 24 pull requests in the month of December. This is a very beginner friendly program.\nSummary Here is the entire article summarized into a table:\n   Program Name Duration Timeline Stipend     Google Summer of Code (GSOC) 10 Weeks, Àú3 Months January 2021 - August 2021 $1500 - $3300   Linux Foundation Mentorship Program (LFX) 12 Weeks, Àú3 Months March 1st - May 31st, June 1st - August 31st, September 1st - November 30th $3000 - $6600   MLH Fellowship 12 Weeks September 20th - December 13th (3 batches year round) Up to $5000 (need based)   Google Season of Docs 6 Months May 17th - December 14th Depends of budget of the organization   Outreachy 3 Months May - August, December - March (Applications due September 3) $5500   Season of KDE 3 Months January - April No   Free Software Foundation (FSF) Internship 12 Weeks 3 terms yearly No   Linux Kernel Mentorship Program 12 Weeks March 1st - May 31st, June 1st - August 31st, September 1st - November 30th $3000 - $6600   Linux Foundation Networking (LFN) Mentorship Program 12 Weeks FT, 24 Weeks PT June 1st - August 21st, September 1st - ? $3000 - $6600   GNOME Summer of Code 10 Weeks, Àú3 Months January 2021 - August 2021 $1500 - $3300   Alibaba Summer of Code 3 Months May 25th - August 31st (2020) Yes   FOSSASIA Codeheat Year round October - June  Prizes for winners   FOSSASIA Internship Program 2 - 6 Months Decided individually Yes   Open Summer of Code 16 days See Timeline Yes   Open Mainframe Project Mentorship Program 3 Months Through GSoC or LFX Yes   CNCF Mentoring Initiatives Àú3 Months See Mentoring Programs Yes   X.Org Endless Vacation of Code (EVoC) 3 - 4 Months Can be initiated anytime $3000   Hyperledger Mentorship Program 3 Months FT - 6 Months PT June 1st $3000 - $6600   Julia Seasons of Contributions (JSoC) - Through GSoC or LFX Yes   Summer of Haskell 10 Weeks, Àú3 Months January 2021 - August 2021 $1500 - $3300   24 Pull Requests 1 Month December 1st - December 24th -    ","permalink":"https://navendu.me/posts/open-source-internship-programs/","summary":"A curated list of Open Source Internship Programs with all the necessary details.","title":"20+ Open Source Internship Programs that you can Apply to"},{"content":"This CNCF Webinar introduces Meshery, the open source, service mesh management plane that enables the adoption, operation, and management of any service mesh and their workloads.\nWatch the webinar below.\n  Check out the links below for getting started with Meshery.\nWebsite: meshery.io\nGitHub: meshery/meshery\nTwitter: mesheryio\nJoin the Slack channel\n","permalink":"https://navendu.me/posts/cncf-webinar-meshery/","summary":"This CNCF Webinar introduces Meshery, the open source, service mesh management plane that enables the adoption, operation, and management of any service mesh and their workloads.","title":"CNCF Webinar: Meshery, the Service Mesh Manager"},{"content":"If you are in a hurry and just want the template skip to the bottom (not cool).\nThe rest of the cool people get ready to take your first step to being a README MASTER! (absolutely not clickbait).\nYou have just created this awesome project and you shared it on GitHub. You think now you‚Äôll just sit back and wait for the world to tell you how cool your project is. After all, you have worked tirelessly for the past month on this very challenging project, right?\nWell, let‚Äôs just take a step back and look from the perspective of a developer or a user checking your project. Although you know how cool your project is, and how it is going to solve that one pressing problem that hasn‚Äôt been fixed(until you came along), the person would be looking at your project and wondering what in the world you have built.\nIf nobody can‚Äôt figure out how to use your software, there‚Äôs something very bad going on.\n  Photo from imgflip\n  If people don‚Äôt know what your software does, then they won‚Äôt use it or contribute to it and they will most likely find something more clear and concise in the sea of open-source software.\nThat‚Äôs where the README comes in!\nA good README is like the face of your project. It is the first thing a person looks at in your project and it gives them a very brief introduction to your software.\n  Beginning of the README from my NSFW Filter project\n  A good-looking and helpful README file can make your project stand out and grab attention from the developer community.\nIt will help them understand your project, how they can get it working and why they should contribute.\n ‚ÄúWow, man! Nice rant there! If you know so much about stuff why don‚Äôt you tell us how to write then‚Ä¶‚Äù\n Hey, I can‚Äôt tell you that there is a concrete set of rules and you should follow those rules without swaying for a good README.\nIt doesn‚Äôt work like that.\nI will share how I write a README for my Open-Source projects and things that you should consider while you write one for your projects and you will(hopefully) be able to get some insights.\nAlso, remember that you won‚Äôt be the README master in a day. Like all things, it takes practice.\nI have been contributing to open-source for a while now and a thing I noticed is that all great projects have an Awesome README.\nYou are on the project page and within minutes you are up and running with your version of the project.\nThere are a lot of contributors, a lot of pull requests, updated versions being released frequently and they all have the common factor of an awesome README.\nA new developer will be able to find all the details to get started like install instructions and contributing guides.\nA new user would be able to find how the project is being used with informative screenshots and demos.\n ‚ÄúI don‚Äôt have time for this, show me the README already!‚Äù\n Alright, alright, alright (sorry I went a little McConaughey).\nHere is the README file for my project NSFW Filter. I think this is the best README that I have written.\nI will go through the different parts of the README that I think are essential to every README.\nHere is the link for the README file used in this example. You can also find a template README file that you can directly copy and paste in your projects.\nWell, that winds things up.\nI bid you farewell my grasshopper with these parting words(of wisdom) from the README Sensei(new twitter handle alert!).\n  Photo from imgflip\n  ","permalink":"https://navendu.me/posts/how-to-write-an-awesome-readme/","summary":"A comprehensive guide to writing README that stands out and makes people go WOW!","title":"How to write an Awesome README"}]